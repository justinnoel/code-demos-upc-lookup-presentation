---
import BaseHead from "../../components/BaseHead.astro";
import SlideHeader from "../../components/SlideHeader.astro";

const title = "Astro Static Site Generator";
const description =
	"Today, we'll demonstrate building a simple UPC lookup service that will be based off a real service created for the Community Garden Kitchen of McKinney, TX.";
const permalink = "https://slides-astro-cloudflare-upc.codedemos.dev/astro";
---

<html lang="en">
	<head>
		<BaseHead {title} {description} {permalink} />
	</head>

	<body class=" text-gray-700 mx-auto max-w-6xl mb-32">
		<SlideHeader />
		<main class="px-8 mt-32 sm:mt-32 md:mt-16 mb-8">
			<!-- <h3 class="text-4xl">Astre</h3> -->
			<p class="mt-8 text-2xl">
				<a
					class="underline hover:text-yellow-700"
					href="https://astro.build"
					target="_blank"
					rel="noopener noreferrer">Astro</a> is one of many Static Site Generators
				(SSG) developers can choose from today.
			</p>

			<h3 class="mt-8 text-4xl">Concepts</h3>
			<ul class="mt-8 text-xl">
				<li class="mt-6 ml-6">
					<p class="text-xl">
						Build faster websites with less client-side Javascript
					</p>
				</li>

				<li class="mt-6 ml-6">
					<p class="text-xl">
						<a
							class="underline hover:text-yellow-700"
							href="https://jasonformat.com/islands-architecture/"
							target="_blank"
							rel="noopener noreferrer">Islands Architecture</a>
					</p>
				</li>
			</ul>

			<div class="mt-6 mx-12 text-xl">
				<q class="italic">
					The general idea of an “Islands” architecture is deceptively simple:
					render HTML pages on the server, and inject placeholders or slots
					around highly dynamic regions. These placeholders/slots contain the
					server-rendered HTML output from their corresponding widget. They
					denote regions that can then be "hydrated" on the client into small
					self-contained widgets, reusing their server-rendered initial HTML.
				</q>
			</div>

			<hr class="mt-16 mx-4 text-gray-300" />

			<h3 class="mt-8 text-4xl">
				Use Any JavaScript or Framework with Built-in TypeScript Support
			</h3>
			<ul class="mt-8 text-xl">
				<li class="mt-6 ml-6">
					<p class="text-xl">Vanilla JS - FTW!</p>
				</li>

				<li class="mt-6 ml-6">
					<p class="text-xl">React</p>
				</li>

				<li class="mt-6 ml-6">
					<p class="text-xl">Svelte</p>
				</li>

				<li class="mt-6 ml-6">
					<p class="text-xl">Vue</p>
				</li>

				<li class="mt-6 ml-6">
					<p class="text-xl">Solid</p>
				</li>
			</ul>

			<p class="mt-8 text-2xl">
				By default, <span class="font-bold">zero</span> developer generated JavaScript
				is shipped to the client. However, a small loader script will be downloaded
				for all pages.
			</p>

			<p class="mt-8 text-2xl">
				The loader script allows for hydrating client components as needed and
				only when they are visible using the intersection observer.
			</p>
		</main>
	</body>
</html>
