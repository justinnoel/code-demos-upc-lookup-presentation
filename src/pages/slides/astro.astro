---
import PresentationLayout from "../../layouts/Presentation.astro";

import ExternalLink from "../../components/ExternalLink.astro";
import HeaderLink from "../../components/HeaderLink.astro";
import List from "../../components/List.astro";
import AstroLinks from "../../data/astro-links.json";

type AstroLink = {
	link: string;
	text: string;
	data?: AstroLink[];
};
---

<PresentationLayout>
	<HeaderLink
		classNames="h1-common"
		headerElement="h1"
		id="/slides/astro"
		text="Astro"
	/>

	<p class="p-common">
		<ExternalLink linkText="Astro" link="https://astro.build" />
		is one of many
		<ExternalLink
			linkText="Static Site Generators (SSG)"
			link="https://serverless.css-tricks.com/services/ssgs/"
		/>

		developers can choose from today.
	</p>

	<hr class="hr-common" />

	<HeaderLink headerElement="h2" id="concepts" text="Concepts" />
	<ul class="my-6">
		<li class="li-linked">
			<p class="p-common">
				Build faster websites with less client-side Javascript
			</p>
		</li>

		<li class="li-linked">
			<p class="p-common">
				<ExternalLink
					linkText="Islands Architecture"
					link="https://jasonformat.com/islands-architecture/"
				/>
			</p>
		</li>
	</ul>

	<div class="mt-8 mx-12">
		<q class="p-common italic">
			The general idea of an “Islands” architecture is deceptively simple:
			render HTML pages on the server, and inject placeholders or slots around
			highly dynamic regions. These placeholders/slots contain the
			server-rendered HTML output from their corresponding widget. They denote
			regions that can then be "hydrated" on the client into small
			self-contained widgets, reusing their server-rendered initial HTML.
		</q>
	</div>

	<hr class="hr-common" />

	<HeaderLink
		classNames="mt-8 text-4xl"
		headerElement="h2"
		id="use-any-javascript-framework"
		text="Use Any JavaScript or Framework with Built-in TypeScript Support"
	/>
	<ul class="my-6">
		<li class="li-linked">Vanilla JS - FTW!</li>

		<li class="li-linked">React</li>

		<li class="li-linked">Svelte</li>

		<li class="li-linked">Vue</li>

		<li class="li-linked">Solid</li>
	</ul>

	<p class="p-common">
		By default, <span class="font-bold">zero</span> developer generated JavaScript
		is shipped to the client. However, a small loader script will be downloaded for
		all pages.
	</p>

	<p class="p-common">
		The loader script allows for hydrating client components as needed and only
		when they are visible using the intersection observer.
	</p>

	<hr class="hr-common" />

	<HeaderLink
		headerElement="h2"
		id="astro-example-site"
		text="This is an Example Astro Site"
	/>

	<p class="p-common">
		The presentation you're viewing was generated using Astro. You can find the
		<ExternalLink
			linkText="source code for it here"
			link="https://github.com/justinnoel/code-demos-upc-lookup-presentation"
		/>
		.
	</p>

	<p class="p-common">
		After the next release of Astro (SOON <sup>TM</sup>), I'll strip all of my
		own content out and make it available as an OSS project called
		<ExternalLink
			linkText="astro-presents"
			link="https://github.com/justinnoel/astro-presents"
		/>
		.
	</p>

	<hr class="hr-common" />

	<HeaderLink headerElement="h2" id="astro-ecosystem" text="Astro Ecosystem" />

	<p class="p-common">
		The Astro Discord server is very active with a diverse group of core team
		and community members. The community has created some great additions to
		Astro to help make working with Astro even easier. Here are some examples.
	</p>

	<!-- This list componenent could be refactored to be more DRY but right
			now only needs to support 2 levels of nesting. Good enough for now! -->
	<List listClassNames="mt-8 text-xl" listElement="ul">
		{AstroLinks.map(({ data, link, text }: AstroLink) => {
			if (data) {
				return (
					<List listClassNames="my-6" listElement="ul">
						{data.map(({ link, text }: AstroLink) => {
							return (
								<li class="li-linked">
									<ExternalLink linkText={text} link={link} />
								</li>
							);
						})}
					</List>
				);
			}

			return (
				<li class="li-linked">
					<ExternalLink linkText={text} link={link} />
				</li>
			);
		})}
	</List>
</PresentationLayout>
